{
  "title": "Chronosync",
  "description": "Une solution full-stack pour synchroniser les données sur plusieurs plateformes.",
  "skills": ["Vue.js", "Express", "Backend", "Frontend", "Développement Web", "Développement Logiciel", "C++", "PowerShell"],
  "overview": "ChronoSync représente une approche moderne de la gestion du temps, spécialement conçue pour les développeurs et les professionnels créatifs. L'application intègre de manière transparente les technologies web et desktop pour offrir une expérience unifiée sur toutes les plateformes.",
  "sections": {
    "architecture": {
      "title": "Architecture",
      "content": {
        "paragraph1": "La Figure 2 montre une capture d'écran du dossier 'packages' du dépôt GitHub de ChronoSync. Il contient quatre répertoires : desktop, mobile, web et shared. Chacun correspond à une version différente de l'application (desktop, mobile et navigateur web), tandis que le dossier shared contient le code commun utilisé sur toutes les plateformes. Cela démontre l'utilisation d'une structure de mono-dépôt - un projet unique regroupant toutes les plateformes ensemble, facilitant le partage de code.",
        "paragraph2": "Comme indiqué dans la légende, ce mono-dépôt a été configuré en utilisant Nx, un outil conçu pour organiser ce type de projet, et pnpm, un gestionnaire de paquets moderne utilisé pour installer, compiler et gérer les différentes parties de l'application. Cette structure permet le développement parallèle sur plusieurs plateformes tout en maintenant la cohérence globale du projet.",
        "paragraph3": "Cette organisation démontre une solide compréhension de l'architecture multi-plateforme. Regrouper différentes versions de l'application dans un seul dépôt permet la réutilisation de code, centralise la logique métier et limite la duplication. Elle facilite également la scalabilité du projet et simplifie la synchronisation entre équipes ou modules. Bien que je n'aie expérimenté cette architecture que dans ce projet, je me sens capable de m'intégrer efficacement ou de contribuer à d'autres projets structurés de manière similaire.",
        "paragraph4": "Le choix de pnpm par rapport à npm ou yarn s'aligne avec les objectifs de performance et de maintenabilité. Dans un projet JavaScript/TypeScript, le gestionnaire de paquets est un outil essentiel pour installer et organiser les bibliothèques du projet. J'ai choisi pnpm pour ses avantages concrets : installation rapide, efficacité d'espace disque grâce aux liens symboliques, et meilleure gestion des dépendances. Cela m'a permis de gérer efficacement plusieurs paquets en parallèle dans un environnement mono-repo tout en maintenant des versions cohérentes. Je me considère maintenant assez compétent dans l'utilisation de gestionnaires de paquets comme pnpm, npm ou bun, les ayant utilisés dans la plupart de mes projets personnels et professionnels, particulièrement lors de la création de sites web comme des gestionnaires de tâches.",
        "paragraph5": "L'implémentation du paquet partagé démontre une intention claire d'optimiser la structure du projet. Ce module contient des fonctions communes, des types ou des modèles utilisés sur toutes les plateformes, garantissant une logique uniforme et réduisant les erreurs ou incohérences. Cependant, je pense avoir encore de la marge d'amélioration dans l'utilisation de ce type de paquet, particulièrement lors du partage de code entre différentes technologies ou langages - un aspect que je n'ai pas exploré en profondeur dans ce projet. D'autre part, concernant la modularité générale du code, je pense avoir un bon niveau d'expertise. Par exemple, dans mon projet 'Power X', un jeu vidéo développé en Java, j'ai appliqué le pattern MVC, qui m'a aidé à mieux organiser le code et le rendre plus lisible et maintenable."
      }
    },
    "expressApi": {
      "title": "Implémentation de l'API Express.js",
      "content": {
        "paragraph1": "La Figure 3 est une capture d'écran du fichier appUsage.ts, un fichier TypeScript qui définit les routes backend pour l'application ChronoSync. Ce fichier fait partie de l'API développée avec Express.js, un framework pour créer des serveurs web avec JavaScript. Une API (Interface de Programmation d'Application) est un ensemble de points d'entrée (appelés routes) que le client (application sur téléphone, ordinateur ou navigateur) peut utiliser pour demander des données au serveur. Dans ce cas spécifique, nous observons cinq routes, chacune permettant la récupération de statistiques d'utilisation (temps passé sur chaque application) selon différentes périodes : quotidienne, hebdomadaire, mensuelle, annuelle et personnalisée.",
        "paragraph2": "L'implémentation de ces cinq routes démontre une compréhension du fonctionnement d'une API REST avec Express.js. Chaque route est conçue pour répondre à une demande client spécifique : par exemple, obtenir toutes les applications utilisées pendant une journée ou sur une plage de dates définie par l'utilisateur. J'ai pu structurer ces points d'entrée clairement, en les regroupant par logique métier (ici : utilisation d'applications), ce qui rend le code plus lisible et plus facile à maintenir. Cette structuration est essentielle dans un projet à long terme ou collaboratif, car elle permet à d'autres développeurs de comprendre rapidement le rôle de chaque partie du code. Mon niveau dans l'utilisation d'Express.js pour créer des routes reste limité, car ce projet est le seul où j'ai pu découvrir et apprendre ce framework. Cependant, je suis capable de comprendre et modifier un projet qui utilise cette technologie sans trop de difficulté.",
        "paragraph3": "Ce regroupement logique dans un seul fichier (appUsage.ts) illustre également une bonne organisation backend autour d'un concept métier unique. Cela facilite l'implémentation de contrôles globaux, tels que la vérification d'authentification utilisateur ou la validation de paramètres, qui peuvent s'appliquer à toutes les routes sans duplication de code. Cette approche modulaire améliore la maintenabilité du code à long terme. Comme nous l'avons vu dans d'autres projets que j'ai présentés dans ce portfolio, comme Power X avec le modèle MVC, je pense maîtriser l'approche modulaire lors du développement dans la plupart des langages.",
        "paragraph4": "L'utilisation de paramètres dynamiques, particulièrement pour la route personnalisée, montre une capacité à concevoir des routes flexibles capables de répondre à des demandes complexes. Dans cette route, le client peut par exemple envoyer deux dates spécifiques, et le serveur retournera uniquement les données correspondant à cet intervalle. Cela donne à l'utilisateur une grande liberté dans la consultation de ses statistiques, tout en gardant une logique unifiée côté serveur. Mon niveau dans la gestion de paramètres personnalisés dans une API, comme avec les API en général, reste limité, par manque d'expériences pratiques variées.",
        "paragraph5": "Enfin, le fait que ce backend serve une application multi-plateforme (web, desktop, mobile) montre que j'ai pu concevoir une API cohérente pour des clients hétérogènes. Toutes les plateformes consomment les mêmes routes, ce qui garantit que les données sont uniformes et synchronisées, quel que soit le support utilisé par l'utilisateur. Cette capacité à concevoir un point de données central pour plusieurs interfaces est un réel avantage dans les projets cross-platform."
      }
    }
  }
}